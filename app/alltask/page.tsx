"use client";

import React from "react";
import Image from "next/image";
import planning from "/assets/done.png";
import Link from "next/link";
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabaseClient";

type Task = {
  id: string;
  title: string;
  detail: string;
  is_completed: boolean;
  image_url: string;
  created_at: string;
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ updated_at ‡∏ï‡∏≤‡∏° Schema ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  updated_at: string; 
};

function AllTaskPage() {
  const [tasks, setTasks] = useState<Task[]>([]);

  // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
  async function fetchTask() {
    // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS Policy: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ RLS Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELECT ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const { data, error } = await supabase
      .from("task_tb") 
      .select("*")
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ 'created_at' ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô DB
      .order("created_at", { ascending: false });

    if (error) {
      alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      console.log("Fetch Error:", error.message);
      return;
    }
    if (data) {
      setTasks(data as Task[]);
    }
  }

  useEffect(() => {
    fetchTask();
    // dependency array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á render ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  }, []);

  // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleDeleteTaskClick
  async function handleDeleteTaskClick(id: string, image_url: string) {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?")) {
      const BUCKET_NAME = 'task_bk';
      const TABLE_NAME = 'task_tb';

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Storage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ image_url)
      // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç image_url ‡πÉ‡∏´‡πâ‡∏î‡∏µ: image_url ‡πÄ‡∏õ‡πá‡∏ô string
      if (image_url) { 
        const image_name = image_url.split("/").pop() as string;
        
        // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Policy (RLS) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE
        const { error: storageError } = await supabase.storage
          .from(BUCKET_NAME)
          .remove([image_name]);

        if (storageError) {
          console.error("Storage Delete Error:", storageError.message);
          alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${storageError.message}`);
          // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DB ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        }
      } ¬†

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö {} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å .delete()
      // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE
      const { data, error } = await supabase
        .from(TABLE_NAME)
        .delete() // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        .eq("id", id);

      if (error) {
        alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + error.message);
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç typo ‡∏à‡∏≤‡∏Å 'massage' ‡πÄ‡∏õ‡πá‡∏ô 'message'
        console.error("Database Delete Error:", error.message); 
        return;
      }
      
      // 2. ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setTasks(tasks.filter(task => task.id !== id));
      alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    }
  }

  return (
    <div className="flex flex-col w-3/4 mx-auto">
      <div className="flex items-center mt-20 flex-col">
        <Image src={planning} alt="" width={150} height={150} />
        <h1 className="text-2xl font-bold mt-10">Manage Task App</h1>
        <h1 className="text-2xl font-bold">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</h1>
      </div>
      <div className="flex justify-end">
        <Link
          href="/addtask"
          className="mt-10 bg-blue-500 hover:bg-blue-700 text-white font-bold py-4 px-4 w-max rounded"
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
        </Link>
      </div>
      <div>
        {/* üí° ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô */}
        {tasks.length === 0 ? (
          <p className="text-center mt-10">...‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</p>
        ) : (
          <table className="min-w-full border boder-black text-sm">
            <thead className="bg-gray-200">
              <tr>
                <th className="border border-black p-2">‡∏£‡∏π‡∏õ</th>
                <th className="border border-black p-2">‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</th>
                <th className="border border-black p-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                <th className="border border-black p-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th className="border border-black p-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°</th>
                <th className="border border-black p-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</th>
                <th className="border border-black p-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {tasks.map((task) => (
                <tr key={task.id}>
                  <td className="border border-black p-2">
                    {task.image_url ? (
                      <Image
                        src={task.image_url}
                        alt="task image"
                        width={150}
                        height={150}
                        unoptimized={true} // ‡πÄ‡∏û‡∏¥‡πà‡∏° unoptimized ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
                      />
                    ) : (
                      "-"
                    )}
                  </td>
                  <td className="border border-black p-2">{task.title}</td>
                  <td className="border border-black p-2">{task.detail}</td>
                  <td className="border border-black p-2">
                    {task.is_completed ? (
                      <span className="text-green-500 font-medium">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                    ) : (
                      <span className="text-red-500 font-medium">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
                    )}
                  </td>
                  <td className="border border-black p-2">
                    {new Date(task.created_at).toLocaleString()}
                  </td>
                  <td className="border border-black p-2">
                    {new Date(task.updated_at).toLocaleString()} 
                  </td>
                  <td className="border border-black p-2 text-center">
                    <Link href={`/editask/id${task.id}`} className="text-green-500 hover:text-green-700 mr-2">
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </Link>
                    <button onClick={() => handleDeleteTaskClick(task.id, task.image_url)}
                      className="text-red-500 hover:text-red-700">
                      ‡∏•‡∏ö
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      <div className="flex justify-center mt-10">
        <Link href="/" className="text-blue-700 font-bold">
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        </Link>
      </div>
    </div>
  );
}

export default AllTaskPage;